# Generated by Django 4.2.10 on 2025-04-27 16:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('orders', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('card', 'Credit/Debit Card'), ('bank', 'Bank Account'), ('wallet', 'Digital Wallet'), ('upi', 'UPI')], max_length=20, verbose_name='type')),
                ('provider', models.CharField(max_length=100, verbose_name='provider')),
                ('token', models.CharField(max_length=255, verbose_name='token')),
                ('is_default', models.BooleanField(default=False, verbose_name='default')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('card_last4', models.CharField(blank=True, max_length=4, verbose_name='last 4 digits')),
                ('card_brand', models.CharField(blank=True, max_length=50, verbose_name='card brand')),
                ('card_exp_month', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='expiry month')),
                ('card_exp_year', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='expiry year')),
                ('bank_name', models.CharField(blank=True, max_length=100, verbose_name='bank name')),
                ('bank_account_last4', models.CharField(blank=True, max_length=4, verbose_name='last 4 digits of account')),
                ('wallet_email', models.EmailField(blank=True, max_length=254, verbose_name='wallet email')),
                ('upi_id', models.CharField(blank=True, max_length=255, verbose_name='UPI ID')),
                ('metadata', models.JSONField(blank=True, null=True, verbose_name='metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'payment method',
                'verbose_name_plural': 'payment methods',
                'unique_together': {('user', 'token')},
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(max_length=255, unique=True, verbose_name='transaction ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='amount')),
                ('currency', models.CharField(max_length=3, verbose_name='currency')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], max_length=20, verbose_name='status')),
                ('type', models.CharField(choices=[('payment', 'Payment'), ('refund', 'Refund'), ('chargeback', 'Chargeback')], max_length=20, verbose_name='type')),
                ('provider', models.CharField(max_length=100, verbose_name='provider')),
                ('provider_transaction_id', models.CharField(max_length=255, verbose_name='provider transaction ID')),
                ('provider_status', models.CharField(max_length=100, verbose_name='provider status')),
                ('provider_response', models.JSONField(blank=True, null=True, verbose_name='provider response')),
                ('error_code', models.CharField(blank=True, max_length=100, verbose_name='error code')),
                ('error_message', models.TextField(blank=True, verbose_name='error message')),
                ('metadata', models.JSONField(blank=True, null=True, verbose_name='metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='completed at')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='orders.order')),
                ('payment_method', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='payments.paymentmethod')),
            ],
            options={
                'verbose_name': 'transaction',
                'verbose_name_plural': 'transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(max_length=50, unique=True, verbose_name='invoice number')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('sent', 'Sent'), ('paid', 'Paid'), ('cancelled', 'Cancelled')], default='draft', max_length=20, verbose_name='status')),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='subtotal')),
                ('tax', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='tax')),
                ('shipping', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='shipping')),
                ('total', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='total')),
                ('issue_date', models.DateField(verbose_name='issue date')),
                ('due_date', models.DateField(verbose_name='due date')),
                ('paid_date', models.DateField(blank=True, null=True, verbose_name='paid date')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('terms', models.TextField(blank=True, verbose_name='terms and conditions')),
                ('metadata', models.JSONField(blank=True, null=True, verbose_name='metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='invoice', to='orders.order')),
            ],
            options={
                'verbose_name': 'invoice',
                'verbose_name_plural': 'invoices',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalTransaction',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('transaction_id', models.CharField(db_index=True, max_length=255, verbose_name='transaction ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='amount')),
                ('currency', models.CharField(max_length=3, verbose_name='currency')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], max_length=20, verbose_name='status')),
                ('type', models.CharField(choices=[('payment', 'Payment'), ('refund', 'Refund'), ('chargeback', 'Chargeback')], max_length=20, verbose_name='type')),
                ('provider', models.CharField(max_length=100, verbose_name='provider')),
                ('provider_transaction_id', models.CharField(max_length=255, verbose_name='provider transaction ID')),
                ('provider_status', models.CharField(max_length=100, verbose_name='provider status')),
                ('provider_response', models.JSONField(blank=True, null=True, verbose_name='provider response')),
                ('error_code', models.CharField(blank=True, max_length=100, verbose_name='error code')),
                ('error_message', models.TextField(blank=True, verbose_name='error message')),
                ('metadata', models.JSONField(blank=True, null=True, verbose_name='metadata')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='completed at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='orders.order')),
                ('payment_method', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='payments.paymentmethod')),
            ],
            options={
                'verbose_name': 'historical transaction',
                'verbose_name_plural': 'historical transactions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
